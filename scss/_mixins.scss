
/* Mixins and Functions
–––––––––––––––––––––––––––––––––––––––––––––––––– */

/* 12 Column Grid */
@function column-name($i) {
  $col-names: (one, two, three, four, five, six, seven, eight, nine, ten, eleven, twelve);
  @return nth($col-names, $i);
}

@function offset-name($i) {
  $col-names: (offset-by-one, offset-by-two, offset-by-three, offset-by-four, offset-by-five, offset-by-six, offset-by-seven, offset-by-eight, offset-by-nine, offset-by-ten, offset-by-eleven, offset-by-twelve);
  @return nth($col-names, $i);
}


/* Column builder mixin */
@mixin col($i) {
  width: 100%;
  float: left;
  margin-bottom: 0.75*$base-spacing;

  @media (min-width: $sm) {
    width: flex-grid($i);

    &:not(:first-of-type) {
      margin-left: flex-gutter();
    }
  }
}

@mixin transition($transition) {
  -webkit-transition: $transition;
  -moz-transition: $transition;
  -o-transition: $transition;
  -ms-transition: $transition;
  transition: $transition;
}

@mixin border-radius($radius) {
  -webkit-border-radius: $radius;
  -moz-border-radius: $radius;
  -ms-border-radius: $radius;
  border-radius: $radius;
}

// centers absolute poisitioned elements (parent must be relative positioned)
@mixin centerer($horizontal: true, $vertical: true) {
  position: absolute;
  @if ($horizontal and $vertical) {
    top: 50%;
    left: 50%;
    transform: translate(-50%, -50%);
  } @else if ($horizontal) {
    left: 50%;
    transform: translate(-50%, 0);
  } @else if ($vertical) {
    top: 50%;
    transform: translate(0, -50%);
  }
}

// cover image
@mixin cover-image($url, $position: false, $attachment: false) { 
  @if ($url) {
    background-image: url($url);
  }   
  background-repeat: no-repeat; 
  background-size: cover; 
  @if ($position) {
    background-position: $position;
  } @else {
    background-position: center center;    
  }
  @if ($attachment) {
    background-attachment: $attachment;
  }   
}

// icon-font
// adapted from http://jaydenseric.com/blog/fun-with-sass-and-font-icons
// usage: 
// @include icon-font(before, "N") {
//    margin-right: 20px;
//    color: blue;
//  };
@mixin icon-font($position: before, $unicode-char: false, $styles: true) {
    @if $position == both {
        $position: 'before, &:after';
    }
    // Either a :before or :after pseudo-element, or both, defaulting to :before
    &:#{$position} {
        @if $unicode-char {
            // A particular icon has been specified
            content: "#{$unicode-char}";
        }
        @if $styles {
            // Supportive icon styles required
            font-family: "Icons";
            speak: none;
            font-style: normal;
            font-weight: normal;
            font-variant: normal;
            text-transform: none;
            line-height: 1;
            -webkit-font-smoothing: antialiased;
            -moz-osx-font-smoothing: grayscale;
        }
        // Include any extra rules supplied for the pseudo-element
        @content;
    }
}









